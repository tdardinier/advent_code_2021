lines = [line.rstrip() for line in open("22_input_test.txt").readlines()]

new_lines = []
for line in lines:
    a = line.split(" ")
    r = a[1].split(",")

    xx = r[0][2:].split("..")
    yy = r[1][2:].split("..")
    zz = r[2][2:].split("..")

    new_line = []
    new_line.append(a[0] == "on")
    new_line.append(int(xx[0]))
    new_line.append(int(xx[1]))
    new_line.append(int(yy[0]))
    new_line.append(int(yy[1]))
    new_line.append(int(zz[0]))
    new_line.append(int(zz[1]))

    new_lines.append(new_line)

lines = new_lines

steps_x = {}
steps_y = {}
steps_z = {}

def increment(steps, x):
    if x not in steps:
        steps[x] = 0
    steps[x] += 1

for line in new_lines:
    increment(steps_x, line[1])
    increment(steps_x, line[2])

    increment(steps_y, line[3])
    increment(steps_y, line[4])

    increment(steps_z, line[5])
    increment(steps_z, line[6])

lsteps_x = sorted(list(steps_x))
lsteps_y = sorted(list(steps_y))
lsteps_z = sorted(list(steps_z))

lsteps_x.append(lsteps_x[-1])
lsteps_y.append(lsteps_y[-1])
lsteps_z.append(lsteps_z[-1])

cubes = set()

# First we initialize what we need
for ix in range(len(lsteps_x) - 1):
    print("Step 1", ix, len(lsteps_x))
    ax = lsteps_x[ix]
    bx = lsteps_x[ix + 1]
    for iy in range(len(lsteps_y) - 1):
        ay = lsteps_y[iy]
        by = lsteps_y[iy + 1]
        for iz in range(len(lsteps_z) - 1):
            az = lsteps_z[iz]
            bz = lsteps_z[iz + 1]
            cubes.add((ax, ay, az))
            cubes.add((ax + 1, ay + 1, az + 1))
            cubes.add((ax, ay + 1, az + 1))
            cubes.add((ax + 1, ay, az + 1))
            cubes.add((ax + 1, ay + 1, az))
            cubes.add((ax + 1, ay, az))
            cubes.add((ax, ay + 1, az))
            cubes.add((ax, ay, az + 1))
            cubes.add((ax, ay, az))

cubes_on = set()
cubes_off = cubes

i = 0
for line in lines:
    i += 1
    print("Step 2", i, len(lines))
    # Turns on
    if line[0]:
        for (x, y, z) in list(cubes_off):
            if line[1] <= x <= line[2]:
                if line[3] <= y <= line[4]:
                    if line[5] <= z <= line[6]:
                        cubes_off.remove((x, y, z))
                        cubes_on.add((x, y, z))
    else:
        for (x, y, z) in list(cubes_on):
            if line[1] <= x <= line[2]:
                if line[3] <= y <= line[4]:
                    if line[5] <= z <= line[6]:
                        cubes_on.remove((x, y, z))
                        cubes_off.add((x, y, z))



def is_on_point(x, y, z):
    return (x, y, z) in cubes_on

c = 0
for ix in range(len(lsteps_x) - 1):
    print(ix, len(lsteps_x))
    ax = lsteps_x[ix]
    bx = lsteps_x[ix + 1]
    for iy in range(len(lsteps_y) - 1):
        ay = lsteps_y[iy]
        by = lsteps_y[iy + 1]
        for iz in range(len(lsteps_z) - 1):
            az = lsteps_z[iz]
            bz = lsteps_z[iz + 1]

            if bx >= ax + 2 and by >= ay + 2 and bz >= az + 2:
                if is_on_point(ax + 1, ay + 1, az + 1):
                    c += max((bx - ax - 1) * (by - ay - 1) * (bz - az - 1), 0)
            if by >= ay + 2 and bz >= az + 2:
                if is_on_point(ax, ay + 1, az + 1):
                    c += max((by - ay - 1) * (bz - az - 1), 0)
            if bx >= ax + 2 and bz >= az + 2:
                if is_on_point(ax + 1, ay, az + 1):
                    c += max((bx - ax - 1) * (bz - az - 1), 0)
            if bx >= ax + 2 and by >= ay + 2:
                if is_on_point(ax + 1, ay + 1, az):
                    c += max((bx - ax - 1) * (by - ay - 1), 0)
            if bx >= ax + 2:
                if is_on_point(ax + 1, ay, az):
                    c += (bx - ax - 1)
            if by >= ay + 2:
                if is_on_point(ax, ay + 1, az):
                    c += (by - ay - 1)
            if bz >= az + 2:
                if is_on_point(ax, ay, az + 1):
                    c += (bz - az - 1)
            if is_on_point(ax, ay, az):
                c += 1

print(c)
